{"ast":null,"code":"var _jsxFileName = \"/Users/chinw/ga_seir/Unit2/projects/newCLU/CLUnion2022/client/clunion/src/pages/Message.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useNavigate, useLocation, useParams, Link } from 'react-router-dom';\nimport PostMessage from '../components/PostMessage';\nimport GuestMessage from '../components/GuestMessage';\nimport '../style/App.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Message = () => {\n  _s();\n\n  const location = useLocation();\n  let navigate = useNavigate();\n  const {\n    msgId\n  } = useParams();\n  const BASE_URL = 'http://localhost:3001/api'; //display all messages ==> getMessage()\n\n  let [allMessage, setAllMessage] = useState([]); // let [postMessage, setPostMessage] = useState([])\n  //create new message ==> createMessage()\n\n  let [message, setMessage] = useState(''); //get message by Id ==> getMessageById\n\n  let [specificMessage, setSpecificMessage] = useState(''); //update message ==> updateMessage()\n\n  const [messageUpdate, setMessageUpdate] = useState(''); //delete message ==> deletemessage\n\n  let [messageDelete, setMessageDelete] = useState({});\n  let [selected, setSelected] = useState(false); // useEffect(() => {\n\n  if (allMessage = []) {\n    let getMessage = async () => {\n      let response = await axios.get(`${BASE_URL}/message`);\n      console.log(response, 'GET ALL MESSAGES');\n      setAllMessage(response.data);\n    };\n\n    getMessage();\n    return () => {\n      allMessage = [...allMessage];\n    };\n  } else if (message) {\n    let createMessage = async () => {\n      let response = await axios.post(`${BASE_URL}/message`).then(function (res) {\n        console.log(response, 'POST MESSAGE');\n        setMessage(response.data);\n      });\n    };\n\n    createMessage();\n    return () => {\n      message = [...allMessage, message];\n    };\n  } else if (!selected && specificMessage) {\n    let getMessageById = async () => {\n      let response = await axios.get(`${BASE_URL}/message/${msgId}`);\n      console.log(response, 'GET SPECIFIC MESSAGES');\n      setSpecificMessage(response.data);\n    };\n\n    getMessageById();\n    return () => {\n      specificMessage = [specificMessage];\n    };\n  } else if (!selected && messageUpdate) {\n    let updateMessage = async () => {\n      let response = await axios.put(`${BASE_URL}/message/${msgId}`).then(function () {\n        console.log(response, 'UPDATE MESSAGE');\n        setMessageUpdate(response.data);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    updateMessage();\n    return () => {\n      updateMessage = [...allMessage, updateMessage];\n    };\n  } else if (!selected && messageDelete) {\n    let deleteMessage = async () => {\n      let response = await axios.delete(`${BASE_URL}/message/${msgId}`).then(function (res) {\n        console.log(response, 'DELETE MESSAGE');\n        setMessage(res.data);\n      }).catch(function (error) {\n        console.log(error);\n      });\n      setMessageDelete(response.data);\n    };\n\n    deleteMessage();\n    return () => {\n      deleteMessage = ['Message Deleted'];\n    }; // } else {\n    //   return (selected = true)\n    // }\n    // }, [])\n\n    const handleChange = e => {\n      e.preventDefault();\n      setMessage(e.target.value);\n    };\n\n    const addMessage = () => {\n      let myMessage = [...allMessage, message];\n      setAllMessage(myMessage);\n      setMessage('');\n    };\n\n    const removeMessage = msg => {\n      let addedMessage = [...allMessage];\n      addedMessage.splice(message, 1);\n      setAllMessage(addedMessage);\n    };\n\n    const updateMessage = () => {\n      let newMessage = '';\n      specificMessage.forEach(function (specific, i) {\n        if (specific === specificMessage) specificMessage[i] = newMessage;\n      });\n    };\n\n    const showAllMessages = () => {\n      let allMessages = [...allMessage];\n      return allMessages;\n    };\n\n    const showOneMessage = () => {\n      return specificMessage;\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Leave a message for the couple!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"msgContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"msgDisplay\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: showAllMessages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(GuestMessage, {\n            handleChange: handleChange,\n            addMessage: addMessage,\n            message: message // allMessage={allMessage}\n            // setAllMessage={setAllMessage}\n            // message={message}\n            // setMessage={setMessage}\n            // specificMessage={specificMessage}\n            // setSpecificMessage={setSpecificMessage}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(PostMessage, {\n            allMessage: allMessage,\n            showAllMessages: showAllMessages,\n            showOneMessage: showOneMessage,\n            removeMessage: removeMessage,\n            updateMessage: updateMessage // allMessage={allMessage}\n            // setAllMessage={setAllMessage}\n            // messageupdate={messageUpdate}\n            // setMessageUpdate={setMessageUpdate}\n            // messageDelete={messageDelete}\n            // setMessageDelete={setMessageDelete}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(Message, \"jDMS4WIDw0+yvERDAOdw69wXzQo=\", false, function () {\n  return [useLocation, useNavigate, useParams];\n});\n\n_c = Message;\nexport default Message;\n\nvar _c;\n\n$RefreshReg$(_c, \"Message\");","map":{"version":3,"sources":["/Users/chinw/ga_seir/Unit2/projects/newCLU/CLUnion2022/client/clunion/src/pages/Message.js"],"names":["React","useState","useEffect","useNavigate","useLocation","useParams","Link","PostMessage","GuestMessage","axios","Message","location","navigate","msgId","BASE_URL","allMessage","setAllMessage","message","setMessage","specificMessage","setSpecificMessage","messageUpdate","setMessageUpdate","messageDelete","setMessageDelete","selected","setSelected","getMessage","response","get","console","log","data","createMessage","post","then","res","getMessageById","updateMessage","put","catch","error","deleteMessage","delete","handleChange","e","preventDefault","target","value","addMessage","myMessage","removeMessage","msg","addedMessage","splice","newMessage","forEach","specific","i","showAllMessages","allMessages","showOneMessage"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useState, useEffect } from 'react'\nimport { useNavigate, useLocation, useParams, Link } from 'react-router-dom'\nimport PostMessage from '../components/PostMessage'\nimport GuestMessage from '../components/GuestMessage'\nimport '../style/App.css'\nimport axios from 'axios'\n\nconst Message = () => {\n  const location = useLocation()\n  let navigate = useNavigate()\n  const { msgId } = useParams()\n\n  const BASE_URL = 'http://localhost:3001/api'\n  //display all messages ==> getMessage()\n  let [allMessage, setAllMessage] = useState([])\n\n  // let [postMessage, setPostMessage] = useState([])\n\n  //create new message ==> createMessage()\n  let [message, setMessage] = useState('')\n  //get message by Id ==> getMessageById\n  let [specificMessage, setSpecificMessage] = useState('')\n  //update message ==> updateMessage()\n  const [messageUpdate, setMessageUpdate] = useState('')\n  //delete message ==> deletemessage\n  let [messageDelete, setMessageDelete] = useState({})\n  let [selected, setSelected] = useState(false)\n\n  // useEffect(() => {\n  if ((allMessage = [])) {\n    let getMessage = async () => {\n      let response = await axios.get(`${BASE_URL}/message`)\n      console.log(response, 'GET ALL MESSAGES')\n      setAllMessage(response.data)\n    }\n    getMessage()\n    return () => {\n      allMessage = [...allMessage]\n    }\n  } else if (message) {\n    let createMessage = async () => {\n      let response = await axios\n        .post(`${BASE_URL}/message`)\n        .then(function (res) {\n          console.log(response, 'POST MESSAGE')\n          setMessage(response.data)\n        })\n    }\n    createMessage()\n    return () => {\n      message = [...allMessage, message]\n    }\n  } else if (!selected && specificMessage) {\n    let getMessageById = async () => {\n      let response = await axios.get(`${BASE_URL}/message/${msgId}`)\n      console.log(response, 'GET SPECIFIC MESSAGES')\n      setSpecificMessage(response.data)\n    }\n    getMessageById()\n    return () => {\n      specificMessage = [specificMessage]\n    }\n  } else if (!selected && messageUpdate) {\n    let updateMessage = async () => {\n      let response = await axios\n        .put(`${BASE_URL}/message/${msgId}`)\n        .then(function () {\n          console.log(response, 'UPDATE MESSAGE')\n          setMessageUpdate(response.data)\n        })\n        .catch(function (error) {\n          console.log(error)\n        })\n    }\n    updateMessage()\n    return () => {\n      updateMessage = [...allMessage, updateMessage]\n    }\n  } else if (!selected && messageDelete) {\n    let deleteMessage = async () => {\n      let response = await axios\n        .delete(`${BASE_URL}/message/${msgId}`)\n        .then(function (res) {\n          console.log(response, 'DELETE MESSAGE')\n          setMessage(res.data)\n        })\n        .catch(function (error) {\n          console.log(error)\n        })\n      setMessageDelete(response.data)\n    }\n    deleteMessage()\n    return () => {\n      deleteMessage = ['Message Deleted']\n    }\n    // } else {\n    //   return (selected = true)\n    // }\n    // }, [])\n\n    const handleChange = (e) => {\n      e.preventDefault()\n      setMessage(e.target.value)\n    }\n\n    const addMessage = () => {\n      let myMessage = [...allMessage, message]\n      setAllMessage(myMessage)\n      setMessage('')\n    }\n\n    const removeMessage = (msg) => {\n      let addedMessage = [...allMessage]\n      addedMessage.splice(message, 1)\n      setAllMessage(addedMessage)\n    }\n\n    const updateMessage = () => {\n      let newMessage = ''\n      specificMessage.forEach(function (specific, i) {\n        if (specific === specificMessage) specificMessage[i] = newMessage\n      })\n    }\n\n    const showAllMessages = () => {\n      let allMessages = [...allMessage]\n      return allMessages\n    }\n\n    const showOneMessage = () => {\n      return specificMessage\n    }\n\n    return (\n      <div>\n        <h2>Leave a message for the couple!</h2>\n        <div className=\"msgContainer\">\n          {/* <div>\n          <label>Leave a message</label>\n          <form className=\"msgForm\" onSubmit={setAllMessage}>\n            <textarea\n              className=\"msgText\"\n              type=\"text\"\n              name=\"message\"\n              placeholder=\"Enter your message here...\"\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n            ></textarea>\n            <button className=\"addMsgBtn\" onChange={setMessage}>\n              Send Message\n            </button>\n          </form>\n          <div>{setAllMessage}</div>\n        </div> */}\n          <div className=\"msgDisplay\">\n            <h3>{showAllMessages}</h3>\n            <GuestMessage\n              handleChange={handleChange}\n              addMessage={addMessage}\n              message={message}\n\n              // allMessage={allMessage}\n              // setAllMessage={setAllMessage}\n              // message={message}\n              // setMessage={setMessage}\n              // specificMessage={specificMessage}\n              // setSpecificMessage={setSpecificMessage}\n            />\n            <PostMessage\n              allMessage={allMessage}\n              showAllMessages={showAllMessages}\n              showOneMessage={showOneMessage}\n              removeMessage={removeMessage}\n              updateMessage={updateMessage}\n\n              // allMessage={allMessage}\n              // setAllMessage={setAllMessage}\n              // messageupdate={messageUpdate}\n              // setMessageUpdate={setMessageUpdate}\n              // messageDelete={messageDelete}\n              // setMessageDelete={setMessageDelete}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Message\n"]},"metadata":{},"sourceType":"module"}